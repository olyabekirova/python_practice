# .value_counts() to determine the top 15 countries ranked by total number of medals
# result is returned as a Series of counts indexed by unique entries from the original Series with values (counts)
# ranked in descending order

# or use .pivot_table() to count by types

# .drop_duplicates()
# .nunique() returns the number of distinct categories

# Group medals by 'NOC': country_grouped
country_grouped = medals.groupby('NOC')

# Compute the number of distinct sports in which each country won medals: Nsports
Nsports = country_grouped['Sport'].nunique()

# Sort the values of Nsports in descending order
Nsports = Nsports.sort_values(ascending = False)

# Print the top 15 rows of Nsports
print(Nsports.head(15))

.idxmax() returns the index of the maximizing element.

# Create the pivot table: medals_won_by_country
medals_won_by_country = medals.pivot_table(index='Edition', columns = 'NOC', values = 'Athlete', aggfunc = 'count')

# Slice medals_won_by_country: cold_war_usa_urs_medals
cold_war_usa_urs_medals = medals_won_by_country.loc[1952:1988, ['USA','URS']]

# Create most_medals 
most_medals = cold_war_usa_urs_medals.idxmax(axis='columns')

# Print most_medals.value_counts()
print(most_medals.value_counts())

 pd.Categorical() - to redefine the column of the DataFrame as an ordered categorical
values = medals.Medal.
categories=['Bronze', 'Silver', 'Gold'].
ordered=True
